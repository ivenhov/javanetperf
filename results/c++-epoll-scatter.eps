%!PS-Adobe-2.0 EPSF-2.0
%%Title: c++-epoll-scatter.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Thu Nov 13 14:51:26 2008
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color true def
/Solid true def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -53 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 160 scalefont setfont
1.000 UL
LTb
1.000 UL
LTa
912 480 M
6016 0 V
1.000 UL
LTb
912 480 M
63 0 V
5953 0 R
-63 0 V
stroke
816 480 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (15.0k)]
] -53.3 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
912 1026 M
6016 0 V
1.000 UL
LTb
912 1026 M
63 0 V
5953 0 R
-63 0 V
stroke
816 1026 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (20.0k)]
] -53.3 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
912 1572 M
6016 0 V
1.000 UL
LTb
912 1572 M
63 0 V
5953 0 R
-63 0 V
stroke
816 1572 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (25.0k)]
] -53.3 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
912 2118 M
6016 0 V
1.000 UL
LTb
912 2118 M
63 0 V
5953 0 R
-63 0 V
stroke
816 2118 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (30.0k)]
] -53.3 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
912 2664 M
6016 0 V
1.000 UL
LTb
912 2664 M
63 0 V
5953 0 R
-63 0 V
stroke
816 2664 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (35.0k)]
] -53.3 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
912 3210 M
6016 0 V
1.000 UL
LTb
912 3210 M
63 0 V
5953 0 R
-63 0 V
stroke
816 3210 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (40.0k)]
] -53.3 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
912 3756 M
6016 0 V
1.000 UL
LTb
912 3756 M
63 0 V
5953 0 R
-63 0 V
stroke
816 3756 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (45.0k)]
] -53.3 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
912 4302 M
6016 0 V
1.000 UL
LTb
912 4302 M
63 0 V
5953 0 R
-63 0 V
stroke
816 4302 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (50.0k)]
] -53.3 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
912 4848 M
6016 0 V
1.000 UL
LTb
912 4848 M
63 0 V
5953 0 R
-63 0 V
stroke
816 4848 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (55.0k)]
] -53.3 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
912 480 M
0 4368 V
1.000 UL
LTb
912 480 M
0 63 V
0 4305 R
0 -63 V
stroke
912 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (0.0 )]
] -53.3 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
1514 480 M
0 4368 V
1.000 UL
LTb
1514 480 M
0 63 V
0 4305 R
0 -63 V
stroke
1514 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (2.0 )]
] -53.3 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
2115 480 M
0 4368 V
1.000 UL
LTb
2115 480 M
0 63 V
0 4305 R
0 -63 V
stroke
2115 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (4.0 )]
] -53.3 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
2717 480 M
0 4368 V
1.000 UL
LTb
2717 480 M
0 63 V
0 4305 R
0 -63 V
stroke
2717 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (6.0 )]
] -53.3 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
3318 480 M
0 4368 V
1.000 UL
LTb
3318 480 M
0 63 V
0 4305 R
0 -63 V
stroke
3318 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (8.0 )]
] -53.3 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
3920 480 M
0 4368 V
1.000 UL
LTb
3920 480 M
0 63 V
0 4305 R
0 -63 V
stroke
3920 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (10.0 )]
] -53.3 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
4522 480 M
0 4368 V
1.000 UL
LTb
4522 480 M
0 63 V
0 4305 R
0 -63 V
stroke
4522 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (12.0 )]
] -53.3 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
5123 480 M
0 4368 V
1.000 UL
LTb
5123 480 M
0 63 V
0 4305 R
0 -63 V
stroke
5123 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (14.0 )]
] -53.3 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
5725 480 M
0 4368 V
1.000 UL
LTb
5725 480 M
0 63 V
0 4305 R
0 -63 V
stroke
5725 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (16.0 )]
] -53.3 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
6326 480 M
0 4368 V
1.000 UL
LTb
6326 480 M
0 63 V
0 4305 R
0 -63 V
stroke
6326 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (18.0 )]
] -53.3 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
6928 480 M
0 4368 V
1.000 UL
LTb
6928 480 M
0 63 V
0 4305 R
0 -63 V
stroke
6928 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (20.0 )]
] -53.3 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTb
912 480 M
6016 0 V
0 4368 V
-6016 0 V
912 480 L
LTb
160 2664 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 160.0 0.0 true true 0 (Messages/s)]
] -53.3 MCshow
grestore
grestore
LTb
3920 80 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (Simultaneous Clients)]
] -53.3 MCshow
grestore
1.000 UP
1.000 UP
4.000 UL
LT0
1213 1107 Pls
1213 1575 Pls
1213 2033 Pls
1213 2798 Pls
1213 839 Pls
1213 2559 Pls
1213 2359 Pls
1213 914 Pls
1213 2888 Pls
1213 2929 Pls
1514 3345 Pls
1514 1843 Pls
1514 3487 Pls
1514 2558 Pls
1514 3544 Pls
1514 1723 Pls
1514 3105 Pls
1514 3586 Pls
1514 3031 Pls
1514 2887 Pls
1814 3216 Pls
1814 4541 Pls
1814 3713 Pls
1814 3308 Pls
1814 3959 Pls
1814 3200 Pls
1814 3924 Pls
1814 4119 Pls
1814 3094 Pls
1814 3195 Pls
2115 3577 Pls
2115 3594 Pls
2115 4146 Pls
2115 3551 Pls
2115 3636 Pls
2115 3373 Pls
2115 3671 Pls
2115 4006 Pls
2115 3352 Pls
2115 3534 Pls
2416 4623 Pls
2416 4092 Pls
2416 3737 Pls
2416 3902 Pls
2416 4211 Pls
2416 4189 Pls
2416 3464 Pls
2416 3501 Pls
2416 3754 Pls
2416 3539 Pls
2717 3546 Pls
2717 3837 Pls
2717 4180 Pls
2717 3567 Pls
2717 4232 Pls
2717 3544 Pls
2717 3713 Pls
2717 3723 Pls
2717 3807 Pls
2717 4441 Pls
3318 3904 Pls
3318 3656 Pls
3318 4244 Pls
3318 3779 Pls
3318 3705 Pls
3318 3556 Pls
3318 4096 Pls
3318 4059 Pls
3318 3977 Pls
3318 3216 Pls
3920 3682 Pls
3920 4633 Pls
3920 3812 Pls
3920 3588 Pls
3920 3754 Pls
3920 4196 Pls
3920 3798 Pls
3920 4359 Pls
3920 3728 Pls
3920 3664 Pls
4522 3419 Pls
4522 3601 Pls
4522 3639 Pls
4522 3772 Pls
4522 4079 Pls
4522 3671 Pls
4522 3857 Pls
4522 3884 Pls
4522 4632 Pls
4522 4161 Pls
5123 4601 Pls
5123 3861 Pls
5123 4285 Pls
5123 3502 Pls
5123 3928 Pls
5123 3674 Pls
5123 4042 Pls
5123 4775 Pls
5123 3656 Pls
5123 3387 Pls
5725 3917 Pls
5725 4040 Pls
5725 3514 Pls
5725 3509 Pls
5725 4249 Pls
5725 3677 Pls
5725 4086 Pls
5725 3699 Pls
5725 3891 Pls
5725 4174 Pls
6326 3302 Pls
6326 4364 Pls
6326 4092 Pls
6326 3443 Pls
6326 4312 Pls
6326 3671 Pls
6326 4261 Pls
6326 3458 Pls
6326 3903 Pls
6326 3590 Pls
6928 4185 Pls
6928 4182 Pls
6928 3461 Pls
6928 4001 Pls
6928 3986 Pls
6928 4052 Pls
6928 3934 Pls
6928 3451 Pls
6928 3636 Pls
6928 3734 Pls
1.000 UL
LTb
912 480 M
6016 0 V
0 4368 V
-6016 0 V
912 480 L
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
