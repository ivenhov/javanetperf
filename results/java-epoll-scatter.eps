%!PS-Adobe-2.0 EPSF-2.0
%%Title: java-epoll-scatter.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Thu Nov 13 14:51:26 2008
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color true def
/Solid true def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -53 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 160 scalefont setfont
1.000 UL
LTb
1.000 UL
LTa
912 480 M
6016 0 V
1.000 UL
LTb
912 480 M
63 0 V
5953 0 R
-63 0 V
stroke
816 480 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (15.0k)]
] -53.3 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
912 1104 M
6016 0 V
1.000 UL
LTb
912 1104 M
63 0 V
5953 0 R
-63 0 V
stroke
816 1104 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (20.0k)]
] -53.3 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
912 1728 M
6016 0 V
1.000 UL
LTb
912 1728 M
63 0 V
5953 0 R
-63 0 V
stroke
816 1728 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (25.0k)]
] -53.3 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
912 2352 M
6016 0 V
1.000 UL
LTb
912 2352 M
63 0 V
5953 0 R
-63 0 V
stroke
816 2352 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (30.0k)]
] -53.3 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
912 2976 M
6016 0 V
1.000 UL
LTb
912 2976 M
63 0 V
5953 0 R
-63 0 V
stroke
816 2976 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (35.0k)]
] -53.3 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
912 3600 M
6016 0 V
1.000 UL
LTb
912 3600 M
63 0 V
5953 0 R
-63 0 V
stroke
816 3600 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (40.0k)]
] -53.3 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
912 4224 M
6016 0 V
1.000 UL
LTb
912 4224 M
63 0 V
5953 0 R
-63 0 V
stroke
816 4224 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (45.0k)]
] -53.3 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
912 4848 M
6016 0 V
1.000 UL
LTb
912 4848 M
63 0 V
5953 0 R
-63 0 V
stroke
816 4848 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (50.0k)]
] -53.3 MRshow
grestore
1.000 UL
LTb
1.000 UL
LTa
912 480 M
0 4368 V
1.000 UL
LTb
912 480 M
0 63 V
0 4305 R
0 -63 V
stroke
912 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (0.0 )]
] -53.3 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
1514 480 M
0 4368 V
1.000 UL
LTb
1514 480 M
0 63 V
0 4305 R
0 -63 V
stroke
1514 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (2.0 )]
] -53.3 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
2115 480 M
0 4368 V
1.000 UL
LTb
2115 480 M
0 63 V
0 4305 R
0 -63 V
stroke
2115 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (4.0 )]
] -53.3 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
2717 480 M
0 4368 V
1.000 UL
LTb
2717 480 M
0 63 V
0 4305 R
0 -63 V
stroke
2717 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (6.0 )]
] -53.3 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
3318 480 M
0 4368 V
1.000 UL
LTb
3318 480 M
0 63 V
0 4305 R
0 -63 V
stroke
3318 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (8.0 )]
] -53.3 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
3920 480 M
0 4368 V
1.000 UL
LTb
3920 480 M
0 63 V
0 4305 R
0 -63 V
stroke
3920 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (10.0 )]
] -53.3 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
4522 480 M
0 4368 V
1.000 UL
LTb
4522 480 M
0 63 V
0 4305 R
0 -63 V
stroke
4522 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (12.0 )]
] -53.3 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
5123 480 M
0 4368 V
1.000 UL
LTb
5123 480 M
0 63 V
0 4305 R
0 -63 V
stroke
5123 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (14.0 )]
] -53.3 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
5725 480 M
0 4368 V
1.000 UL
LTb
5725 480 M
0 63 V
0 4305 R
0 -63 V
stroke
5725 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (16.0 )]
] -53.3 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
6326 480 M
0 4368 V
1.000 UL
LTb
6326 480 M
0 63 V
0 4305 R
0 -63 V
stroke
6326 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (18.0 )]
] -53.3 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTa
6928 480 M
0 4368 V
1.000 UL
LTb
6928 480 M
0 63 V
0 4305 R
0 -63 V
stroke
6928 320 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (20.0 )]
] -53.3 MCshow
grestore
1.000 UL
LTb
1.000 UL
LTb
912 480 M
6016 0 V
0 4368 V
-6016 0 V
912 480 L
LTb
160 2664 M
gsave 0 setgray
currentpoint gsave translate 90 rotate 0 0 moveto
[ [(Helvetica) 160.0 0.0 true true 0 (Messages/s)]
] -53.3 MCshow
grestore
grestore
LTb
3920 80 M
gsave 0 setgray
[ [(Helvetica) 160.0 0.0 true true 0 (Simultaneous Clients)]
] -53.3 MCshow
grestore
1.000 UP
1.000 UP
4.000 UL
LT0
1213 2605 Pls
1213 2295 Pls
1213 1749 Pls
1213 767 Pls
1213 1649 Pls
1213 766 Pls
1213 2329 Pls
1213 776 Pls
1213 1205 Pls
1213 2028 Pls
1514 3177 Pls
1514 2519 Pls
1514 3324 Pls
1514 2976 Pls
1514 4067 Pls
1514 2842 Pls
1514 3057 Pls
1514 2650 Pls
1514 3070 Pls
1514 3383 Pls
1814 3457 Pls
1814 3134 Pls
1814 3258 Pls
1814 3108 Pls
1814 3483 Pls
1814 4147 Pls
1814 3509 Pls
1814 3116 Pls
1814 3278 Pls
1814 4374 Pls
2115 3215 Pls
2115 3649 Pls
2115 3535 Pls
2115 3337 Pls
2115 3432 Pls
2115 4452 Pls
2115 3645 Pls
2115 3435 Pls
2115 3462 Pls
2115 3350 Pls
2416 4021 Pls
2416 3377 Pls
2416 3603 Pls
2416 3379 Pls
2416 3322 Pls
2416 3745 Pls
2416 4266 Pls
2416 3952 Pls
2416 3998 Pls
2416 3385 Pls
2717 4134 Pls
2717 4023 Pls
2717 3479 Pls
2717 3585 Pls
2717 3505 Pls
2717 3823 Pls
2717 4429 Pls
2717 3348 Pls
2717 3442 Pls
2717 3627 Pls
3318 4655 Pls
3318 3255 Pls
3318 3623 Pls
3318 4397 Pls
3318 4029 Pls
3318 3459 Pls
3318 4018 Pls
3318 4547 Pls
3318 3957 Pls
3318 4232 Pls
3920 4250 Pls
3920 3642 Pls
3920 3477 Pls
3920 4082 Pls
3920 3887 Pls
3920 4210 Pls
3920 3979 Pls
3920 3785 Pls
3920 3810 Pls
3920 4219 Pls
4522 3693 Pls
4522 3859 Pls
4522 3614 Pls
4522 3560 Pls
4522 3636 Pls
4522 4113 Pls
4522 4810 Pls
4522 3402 Pls
4522 3801 Pls
4522 3973 Pls
5123 3567 Pls
5123 3557 Pls
5123 3794 Pls
5123 3501 Pls
5123 3662 Pls
5123 3307 Pls
5123 3590 Pls
5123 3475 Pls
5123 3249 Pls
5123 3767 Pls
5725 3612 Pls
5725 3838 Pls
5725 3811 Pls
5725 3516 Pls
5725 4195 Pls
5725 3708 Pls
5725 3510 Pls
5725 3438 Pls
5725 3816 Pls
5725 3739 Pls
6326 3660 Pls
6326 3927 Pls
6326 3479 Pls
6326 3435 Pls
6326 4087 Pls
6326 3559 Pls
6326 3508 Pls
6326 3564 Pls
6326 3800 Pls
6326 3557 Pls
6928 3961 Pls
6928 3470 Pls
6928 4024 Pls
6928 3399 Pls
6928 3909 Pls
6928 3292 Pls
6928 4253 Pls
6928 3699 Pls
6928 3764 Pls
6928 3621 Pls
1.000 UL
LTb
912 480 M
6016 0 V
0 4368 V
-6016 0 V
912 480 L
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
